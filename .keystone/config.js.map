{
  "version": 3,
  "sources": ["../keystone.ts", "../schemas/User.ts", "../schemas/Task.ts", "../schemas/FollowUp.ts", "../schema.ts", "../auth.ts", "../config.ts", "../schemas/config.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core'\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from './schema'\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth'\nimport {getDatabaseConnection, getDatabaseType} from './schemas/config'\nimport {keystoneconfig} from './config'\n\nexport default withAuth(\n  config({\n      server: {\n          cors: { origin: [keystoneconfig.frontend.host, keystoneconfig.backend.host], credentials: true },\n          port: 3000,\n          maxFileSize: 200 * 1024 * 1024,\n          extendExpressApp: async (app, commonContext) => { /* ... */ },\n          extendHttpServer: async (httpServer, commonContext) => { /* ... */ },\n      },\n    db: {\n        provider: getDatabaseType(),\n        url: getDatabaseConnection(),\n        onConnect: async context => {\n            console.log('Connected to the database')\n        },\n        //Optional advanced configuration\n        //enableLogging: true,\n        idField: { kind: 'uuid' }\n    },\n    lists,\n      ui: {\n          isAccessAllowed: ()=> true,\n          // only admins can view the AdminUI\n          // isAccessAllowed: (context) => {\n          //     return context.session?.data?.isAdmin ?? false\n          // },\n      },\n    session,\n  })\n)\n", "import {list} from \"@keystone-6/core\";\nimport {checkbox, password, relationship, text, timestamp} from \"@keystone-6/core/fields\";\nimport {allowAll} from \"@keystone-6/core/access\";\nimport type {Session} from \"../schema\";\n\nexport function isAdminOrSameUser ({ session }: { session?: Session }) {\n    // you need to have a session to do this\n    if (!session) return false\n\n    // admins can do anything\n    if (session.data.isAdmin) return true\n}\n\nexport function isAdmin ({ session }: { session?: Session }) {\n    // you need to have a session to do this\n    if (!session) return false\n\n    // admins can do anything\n    if (session.data.isAdmin) return true\n\n    // otherwise, no\n    return false\n}\n\nexport const User = list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n    // this is the fields for our User list\n    fields: {\n        // by adding isRequired, we enforce that every User should have a name\n        //   if no name is provided, an error will be displayed\n        name: text(),\n\n        email: text({\n            validation: { isRequired: true },\n            // by adding isIndexed: 'unique', we're saying that no user can have the same\n            // email as another user - this may or may not be a good idea for your project\n            // email as another user - this may or may not be a good idea for your project\n            isIndexed: 'unique',\n        }),\n\n        password: password({ validation: { isRequired: true } }),\n\n        todos: relationship({ ref: 'Task.assignedTo', many: true }),\n\n        createdAt: timestamp({\n            // this sets the timestamp to Date.now() when the user is first created\n            defaultValue: { kind: 'now' },\n        }),\n        isAdmin: checkbox({\n            access: {\n                // only the respective user, or an admin can read this field\n                read: isAdminOrSameUser,\n\n                // only admins can create, or update this field\n                create: isAdmin,\n                update: isAdmin,\n            },\n            defaultValue: false,\n            ui: {\n                // only admins can edit this field\n                createView: {\n                    fieldMode: args => (isAdmin(args) ? 'edit' : 'hidden'),\n                },\n                itemView: {\n                    fieldMode: args => (isAdmin(args) ? 'edit' : 'read'),\n                },\n            },\n        }),\n    }\n})", "import {list} from \"@keystone-6/core\";\nimport { relationship, text, timestamp} from \"@keystone-6/core/fields\";\nimport {allowAll} from \"@keystone-6/core/access\";\nimport type {Session} from \"../schema\";\n\nexport const Task = list({\n    access: allowAll,\n    ui: {\n        listView: {\n            initialColumns: ['id', 'label', 'assignedTo', 'createdAt'],\n        },\n    },\n    fields: {\n        label: text(),\n        description: text(),\n        assignedTo: relationship({ ref: 'User.todos' }),\n        followup: relationship({ref: 'FollowUp.task'}),\n        createdAt: timestamp({\n            defaultValue: { kind: 'now' },\n        }),\n        completedAt: timestamp(),\n    },\n    hooks: {\n        resolveInput: async ({ item, resolvedData, context }) => {\n            const sesh = context.session as Session;\n            if (!sesh.itemId) {\n                throw new Error('You must be logged in to do this!');\n            }\n\n            resolvedData.assignedTo = { connect: { id: sesh.itemId} }\n\n            return resolvedData;\n        },\n    }\n})", "import {list} from \"@keystone-6/core\";\nimport { relationship, text, timestamp} from \"@keystone-6/core/fields\";\nimport {allowAll} from \"@keystone-6/core/access\";\n\nexport const FollowUp = list({\n    access: allowAll,\n    ui: {\n        listView: {\n            initialColumns: ['id', 'label', 'assignedTo', 'completedAt'],\n        },\n    },\n    fields: {\n        label: text(),\n        description: text(),\n        task: relationship({ ref: 'Task.followup' }),\n        completedAt: timestamp(),\n    },\n})", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from '@keystone-6/fields-document'\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport { type Lists } from '.keystone/types'\nimport {User} from \"./schemas/User\";\nimport {Task} from \"./schemas/Task\";\nimport {FollowUp} from \"./schemas/FollowUp\";\n\nexport type Session = {\n  itemId: string\n  data: {\n    isAdmin: boolean\n  }\n}\n\nexport const lists = {\n  User,\n  Task,\n  FollowUp\n} satisfies Lists\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { createAuth } from '@keystone-6/auth'\n\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session'\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt isAdmin',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    itemData: {\n      // isAdmin is true, so the admin can pass isAccessAllowed (see below)\n      isAdmin: true,\n    },\n  },\n})\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: process.env.SESSION_SECRET,\n})\n\nexport { withAuth, session }\n", "import {DatabaseProvider} from \"@keystone-6/core/types\";\n\nconst dotenv = require('dotenv');\ndotenv.config();\n\nexport type configInfo = {\n    frontend: {\n        host: string,\n        port: number\n    },\n    backend: {\n        host: string,\n        port: number\n    },\n    database: {\n        dbtype: DatabaseProvider,\n        name: string,\n        host: string,\n        user: string,\n        password: string,\n        port: number\n    },\n    session: {\n        cookieSecret: string\n    }\n}\n\nconst config: configInfo = {\n    frontend: {\n        host: (process.env.FRONTEND_HOST === undefined)?'localhost':process.env.FRONTEND_HOST,\n        port: (process.env.FRONTEND_PORT === undefined)?3001:Number(process.env.FRONTEND_PORT)\n    },\n    backend: {\n        host: (process.env.BACKEND_HOST === undefined)?'localhost':process.env.BACKEND_HOST,\n        port: (process.env.BACKEND_PORT === undefined)?3002:Number(process.env.BACKEND_PORT)\n    },\n    database: {\n        dbtype: (process.env.DB_TYPE === undefined)?'postgresql':process.env.DB_TYPE as DatabaseProvider,\n        name: (process.env.DB_DATABASE === undefined)?'template1':process.env.DB_DATABASE,\n        host: (process.env.DB_HOST === undefined)?'localhost':process.env.DB_HOST,\n        user: (process.env.DB_USER === undefined)?'postgres':process.env.DB_USER,\n        password: (process.env.DB_PWD === undefined)?'passw0rd':process.env.DB_PWD,\n        port: (process.env.DB_PORT === undefined)?3306:Number(process.env.DB_PORT)\n    },\n    session: {\n        cookieSecret: (process.env.COOKIE_SECRET === undefined)?'this is a very long secret that has 32 characters':process.env.COOKIE_SECRET\n    }\n}\n\nexport { config as keystoneconfig}", "import {keystoneconfig} from '../config'\nimport {DatabaseProvider} from \"@keystone-6/core/types\";\n\nexport const getDatabaseType = (): DatabaseProvider => {\n    const {database} = keystoneconfig\n\n    return database.dbtype\n}\n\nexport const getDatabaseConnection = () => {\n    const {database} = keystoneconfig\n\n    const dbPrefix = (database.dbtype==='mysql')?'mysql':'postgres'\n\n    //return `postgresql://neondb_owner:npg_5yNXgUa9mveD@ep-red-dew-a27xyzxx-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require`\n    return `${dbPrefix}://${database.user}:${database.password}@${database.host}:${database.port}/${database.name}`\n}\n\nexport const getShadowDatabaseConnection = () => {\n    const {database} = keystoneconfig\n\n    const dbPrefix = (database.dbtype==='mysql')?'mysql':'postgres'\n\n    //return `postgresql://neondb_owner:npg_5yNXgUa9mveD@ep-red-dew-a27xyzxx-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require`\n    return `${dbPrefix}://${database.user}:${database.password}@${database.host}:${database.port}/shadowdb`\n}\n"],
  "mappings": "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",
  "names": ["import_core", "session", "import_core", "import_fields", "import_access", "import_core", "import_fields", "import_access"]
}
